#!/bin/bash

. /etc/init.d/functions.sh

DB="/var/db/pkg/"
[[ -z "${DKMS_DB}" ]] && DKMS_DB="/var/lib/portage/dkms_db"
DKMS_TMP="/tmp/dkms_tmp"
manual_ver="${2}"

#colors
green="\033[01;32m"
red="\033[01;31m"
restore="\033[00m"


##### check it!
check(){
  if [ -z "${KERNEL}" ];then
	KERNEL="$(uname -r)"
  fi
  DKMS_FAILED="/var/log/dkms_failed-${KERNEL}"

  if [ -f "${DKMS_DB}" ];then
  echo -e "\nTarget: ${green}${KERNEL}${restore}\n"
	while read PKG MOD PKG_FILE;do

	  if ! [ -f "${PKG_FILE}" ];then
		echo -e "\n${red}Database incorrect!${restore} ---> \"${green}${PKG_FILE}${restore}\" no such file.\n"
		VER="${PKG_FILE##*modules/}"
		KERNEL="${VER%%/*}"
		FAILED+=" ${PKG}"
		BREAK="1"
		echo -e "New target: ${green}${KERNEL}${restore}\n"
		break;
	  fi

	  MOD_FILE="/lib/modules/${KERNEL}/${MOD}"
	  if [ -f "${MOD_FILE}" ];then
##### version of current_kernel's module
		MOD_VER="$( modinfo "${MOD_FILE}" | awk '/^version/ {print $2}' )"
##### version of pkg's module
		PKG_VER="$( modinfo "${PKG_FILE}" | awk '/^version/ {print $2}' )"
		if [ "${PKG_VER}" != "${MOD_VER}" ];then
		  FAILED+=" ${PKG}" 
		  echo -e "${MOD##*/}:\t${MOD_VER}" && eend 1
		else
		  echo -e "${MOD##*/}:\t${MOD_VER}" && eend 0
		fi
	  else
		FAILED+=" ${PKG}"
		echo -e "${MOD##*/}:\t${MOD_VER}" && eend 1
	  fi
	done < "${DKMS_DB}"
	rebuild_failed;
	
	if [ `readlink /usr/src/linux` != "linux-`uname -r`" ];then
	  echo -e "\nSwitch symlink to: ${green}`uname -r`${restore} (loaded)\n"
	  ln -sfT linux-`uname -r` /usr/src/linux
	fi
  else
	db_rebuild;
	check;
  fi
}

##### database
db_rebuild(){
  db_create(){
#list of all installed modules by packages
  if [ -z "${UPDATED}" ];then
	TARGETS="$(grep -H "/lib/modules/.*.ko\>" ${DB}*/*/CONTENTS)"
  else
	TARGETS+="$(grep -H "/lib/modules/.*.ko\>" `find ${UPDATED} -type f -name "CONTENTS"`)"
  fi

  if [ -n "${TARGETS}" ];then
	while read line;do
	  MODULE="$(awk '{print $2}' <<< ${line})"
	  KO="${MODULE#/*/*/*/}"
	  PKG_FULL="${line%/CONTENTS:*}"
#get ${CATEGORY}/${PN}
	  export "$(bzgrep "declare -x CATEGORY=" ${PKG_FULL}/environment.bz2 | awk '{print $3}')"
	  export "$(bzgrep "declare -x PN=" ${PKG_FULL}/environment.bz2 | awk '{print $3}')"
#creating database
	  echo -e "Processing:\t${green}${CATEGORY//'"'/}/${PN//'"'/}${restore}" 
	  eend $?
	  DATA+="${CATEGORY//'"'/}/${PN//'"'/} ${KO} ${MODULE}\n"
	done <<< "${TARGETS}"
  fi

  if [ -f ${DKMS_DB} ];then
	while read PKG MOD FILE;do
	  if `grep -q "${PKG} ${MOD} /.*" ${DKMS_DB}`;then
		sed -e "s|${PKG} ${MOD} /.*|${PKG} ${MOD} ${FILE}|" -i ${DKMS_DB}
	  else
		[ -z ${PKG} ] || echo -e "${PKG} ${MOD} ${FILE}" >> ${DKMS_DB}
	  fi
	done <<< "`echo -e ${DATA}`"
  else
	echo -e "${DATA%%\\n}" > ${DKMS_DB}
  fi
  eend 0
  }

  if [ -f "${DKMS_DB}" ];then
# rebuild db if dkms's database older then pkg's database
	DKMS_TIMESTAMP="$(stat -c %Y ${DKMS_DB})"
	DB_TIMESTAMP="$(ls -dgo --time-style=+%s --color=never ${DB}*/* | awk '{print $4,$5}')"
	while read time dir;do
	  if (( "${time}" > "${DKMS_TIMESTAMP}" ));then
		updated+="${dir} "
	  fi
	done <<< "${DB_TIMESTAMP}"

	if [ -n "${updated}" ];then
	  UPDATED="${updated%,}"
	  echo -e "Database:\t${green}updating...${restore}"
	  db_create;
	  eend $?
	else
	  echo -e "Database:\t${green}already up-to-date.${restore}"
	  eend 0
	fi
  else
	echo -e "Database:\t${green}creating...${restore}\n"
	db_create;
	eend $?
  fi
}

##### rebuilding broken modules for target kernel
rebuild_failed(){
  if [ -n "${FAILED}" ];then
	FAILED_ATOMS="$(echo -e "${FAILED// /\n}" | sort -u)"
	echo -e "Target packages: ${green}${FAILED_ATOMS}${restore}\n"
	for ATOM in ${FAILED_ATOMS};do
	  DB_PKG="$(find ${DB} -maxdepth 2 -name "${ATOM#*/}*")"
	  echo "${ATOM} $(stat -c %Y $DB_PKG)" >> ${DKMS_TMP}
	done
	  ln -sfT linux-${KERNEL} /usr/src/linux
	  emerge -1 ${FAILED_ATOMS} \
	  && rm -f "${DKMS_FAILED}" || \
	  while read atom mtime;do
		if (( "$(stat -c %Y ${DB_PKG})" == "${mtime}" ));then
		  echo "${atom}" >> "${DKMS_FAILED}"
		  exit 1;
		fi
	  done < ${DKMS_TMP}
	rm -f ${DKMS_TMP}
  else
	rm -f "${DKMS_FAILED}"
  fi

  [ -n "${BREAK}" ] && unset BREAK KERNEL FAILED && check;
}

##### rebuild ALL modules for target kernel
rebuild_all_mods() {
  if [ -z "${KERNEL}" ];then
	KERNEL="$(uname -r)"
  fi
  DKMS_FAILED="/var/log/dkms_failed-${KERNEL}"

  if [ -f "${DKMS_DB}" ];then
  echo -e "\nTarget: ${green}${KERNEL}${restore}\n"
	while read PKG MOD PKG_FILE;do
	  FAILED+=" ${PKG}"
	done < ${DKMS_DB}
	rebuild_failed;
	echo -e "\nswitch symlink to loaded kernel.\n"
	ln -sfT linux-`uname -r` /usr/src/linux
  else
	db_rebuild;
	rebuild_all_mods;
  fi
}

case ${1} in

--check )
  if [ -n "${manual_ver}" ];then
	KERNEL="${manual_ver##*linux-}"
	KERNEL="${KERNEL%/}"
  fi
  check;;

--db ) db_rebuild;;

--list )
  if [ -f "${DKMS_DB}" ];then
	 awk '{print $1,$2}' ${DKMS_DB} | column -t
  else
	db_rebuild;
  fi;;

--check-link ) build_symlink() {
  symlink="$(readlink /usr/src/linux)"
  KERNEL="${symlink##linux-}"
  check
  }
  build_symlink;;

--rebuild-all )
  if [ -n "${manual_ver}" ];then
	KERNEL="${manual_ver##*linux-}"
	KERNEL="${KERNEL%/}"
  fi
  rebuild_all_mods;;

* ) echo -e \
"Usage: dkms-gentoo [OPTION]â€¦ [TARGET]
available options:

--db:                   rebuild database.
--list:                 display database.
--check [TARGET]:       check modules for TARGET kernel.
--check-link:           check modules for symlinked kernel.
--rebuild-all [TARGET]: rebuild all modules for TARGET kernel.

TARGET can be one of:

\t[version]: example '3.5.3-pf'
\t[PATH]:    example '/usr/src/linux-3.5.6-pf/'

else TARGET=='`uname -r`' (loaded)";;

esac
