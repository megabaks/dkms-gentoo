#!/bin/bash

. /etc/init.d/functions.sh

DB="/var/db/pkg/"
[[ -z "${DKMS_DB}" ]] && DKMS_DB="/var/lib/portage/dkms_db"
DKMS_TMP="/tmp/dkms_tmp"
manual_ver="${2}"

##### check it!
check(){
  if [ -z "${KERNEL}" ];then
	KERNEL="$(uname -r)"
  fi
  DKMS_FAILED="/var/log/dkms_failed-${KERNEL}"

  if [ -f "${DKMS_DB}" ];then
  echo -e "\nTarget: \033[01;32m${KERNEL}\033[00m\n"
	while read PKG MOD PKG_FILE;do

	  if ! [ -f "${PKG_FILE}" ];then
		echo -e "\n\033[01;31mDatabase incorrect!\033[00m\n"
		VER="${PKG_FILE##*modules/}"
		KERNEL="${VER%%/*}"
		FAILED+=" ${PKG}"
		BREAK="1"
		echo -e "New target: \033[01;32m${KERNEL}\033[00m\n"
		break;
	  fi

	  MOD_FILE="/lib/modules/${KERNEL}/${MOD}"
	  if [ -f "${MOD_FILE}" ];then
##### version of current_kernel's module
		MOD_VER="$( modinfo "${MOD_FILE}" | awk '/^version/ {print $2}' )"
##### version of pkg's module
		PKG_VER="$( modinfo "${PKG_FILE}" | awk '/^version/ {print $2}' )"
		if [ "${PKG_VER}" != "${MOD_VER}" ];then
		  FAILED+=" ${PKG}" 
		  echo "${MOD#*/}" && eend 1
		else
		  echo "${MOD#*/}" && eend 0
		fi
	  else
		FAILED+=" ${PKG}"
		echo "${MOD#*/}" && eend 1
	  fi
	done < ${DKMS_DB}
	rebuild_failed;
  else
	db_rebuild;
	check;
  fi
}

##### database
db_rebuild(){
  db_create(){
#list of all installed modules by packages
  TARGETS="$(grep "/lib/modules/.*.ko\>" ${DB}*/*/CONTENTS)"
  while read line;do
	MODULE="$(awk '{print $2}' <<< ${line})"
	KO="${MODULE#/*/*/*/}"
	PKG_FULL="${line%/CONTENTS*}"
#get ${CATEGORY}/${PN}
	export "$(bzgrep "declare -x CATEGORY=" ${PKG_FULL}/environment.bz2 | awk '{print $3}')"
	export "$(bzgrep "declare -x PN=" ${PKG_FULL}/environment.bz2 | awk '{print $3}')"
#creating database
	DATA+="${CATEGORY//'"'/}/${PN//'"'/} ${KO} ${MODULE}\n"
  done <<< "${TARGETS}"
  echo -e "${DATA%\\n}" | column -t > ${DKMS_DB}
  eend 0
  }

  if [ -f "${DKMS_DB}" ];then
# rebuild db if dkms's database older then pkg's database
	DKMS_TIMESTAMP="$(stat -c %Y ${DKMS_DB})"
	DB_TIMESTAMP="$(stat -c %Y ${DB}*/ ${DB}*/*/ | sort | tail -n1)"
	if (( "${DB_TIMESTAMP}" > "${DKMS_TIMESTAMP}" ));then
	  echo "Database: updating"
	  db_create
	  eend $?
	else
	  echo "Database: already up-to-date."
	  eend 0
	fi
  else
	echo "Database: creating"
	db_create
	eend $?
  fi
}

##### rebuilding broken modules for target kernel
rebuild_failed(){
  if [ -n "${FAILED}" ];then
	FAILED_ATOMS="$(echo -e "${FAILED// /\n}" | sort -u)"
	for ATOM in ${FAILED_ATOMS};do
	  DB_PKG="$(find ${DB} -maxdepth 2 -name "${ATOM#*/}*")"
	  echo "${ATOM} $(stat -c %Y $DB_PKG)" >> ${DKMS_TMP}
	done
	  eselect kernel set linux-${KERNEL}
	  emerge -1 ${FAILED_ATOMS} \
	  && rm -f "${DKMS_FAILED}" || \
	  while read atom mtime;do
		if (( "$(stat -c %Y ${DB_PKG})" == "${mtime}" ));then
		  echo "${atom}" >> "${DKMS_FAILED}"
		fi
	  done < ${DKMS_TMP}
	rm -f ${DKMS_TMP}
  else
	rm -f "${DKMS_FAILED}"
  fi

  [ -n "${BREAK}" ] && unset BREAK KERNEL FAILED && check;
}

case ${1} in

--check ) check;;

--db ) db_rebuild;;

--list )
  if [ -f "${DKMS_DB}" ];then
	awk '{print $1,$2}' ${DKMS_DB} | column -t
  else
	echo -e "database not found!\nYou need run:\ndkms-gentoo --db"
  fi;;

--check-link ) build_symlink() {
  symlink="$(readlink /usr/src/linux)"
  KERNEL="${symlink##linux-}"
  check
  }
  build_symlink;;

--check-manual ) manual() {
  KERNEL="${manual_ver##*linux-}"
  KERNEL="${KERNEL%/}"
  check
  }
  manual;;

* ) echo \
"Usage: dkms-gentoo [OPTION]...[manual_only_VERSION]
available options:

--db:           rebuild database.
--list:         display database.
--check:        check modules for loaded kernel.
--check-link:   check modules for symlinked kernel.
--check-manual: check modules for manualy selected kernel: version (i.e. 3.5.3-pf) or path to root of sources(i.e /usr/src/linux-3.5.6-pf/)";;

esac
